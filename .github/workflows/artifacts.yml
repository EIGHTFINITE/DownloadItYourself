name: "Artifacts"

on:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * *'

jobs:
  artifacts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Artifacts
      shell: bash
      run: |
        bash --noprofile --norc -e -o pipefail docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        bash --noprofile --norc -e -o pipefail docs/tools/actions-artifacts.sh
        export GIT_AUTHOR_DATE="$(git log -1 --format=%aD)"
        export GIT_COMMITTER_DATE="$(git log -1 --format=%cD)"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --amend --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add vendored Node modules
        
        Node modules and their dependencies updated to the latest versions found in https://github.com/${{ github.repository }}/blob/master/package.json" | sed -n 1p
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Artifacts
        git tag -f artifacts
        git push -f origin refs/tags/artifacts:refs/tags/artifacts
  readme:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
    - name: README
      shell: bash
      run: |
        bash --noprofile --norc -e -o pipefail docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        git restore --source=artifacts -- bin/ node_modules/ package-lock.json
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node --use_strict main.js --readme_only
        git checkout -- downloadlist.json
    - uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update README
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Update README
        body: |
          Update the README to reflect the latest changes.
        labels: auto-merge
        branch: actions/readme
        base: master
  downloadlist:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
    - name: Downloadlist
      shell: bash
      run: |
        bash --noprofile --norc -e -o pipefail docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        git restore --source=artifacts -- bin/ node_modules/ package-lock.json
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node --use_strict main.js --readme_only
        git checkout -- README.html README.md
    - uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update downloadlist
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Update downloadlist
        body: |
          Update the downloadlist to reflect the latest changes.
        labels: auto-merge
        branch: actions/downloadlist
        base: master
  engines:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
    - name: Engines
      shell: bash
      run: |
        bash --noprofile --norc -e -o pipefail docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        git restore --source=artifacts -- node_modules/
        sed -i "0,/\"npm\": \".*\"/s//\"npm\": \"$(cat node_modules/npm-6/node_modules/npm/package.json | python -c "import sys, json; print(json.load(sys.stdin)['version'])") || $(cat node_modules/npm-7/node_modules/npm/package.json | python -c "import sys, json; print(json.load(sys.stdin)['version'])") || $(cat node_modules/npm/package.json | python -c "import sys, json; print(json.load(sys.stdin)['version'])")\"/" package.json
        rm -r node_modules/
    - uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update engines
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Update engines
        body: |
          Update the engines field.
        labels: auto-merge
        branch: actions/engines
        base: master
  artifacts_jsonlint:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        repository: EIGHTFINITE/demjson
        ref: master
        path: demjson
    - name: Build demjson
      shell: bash
      run: |
        cd demjson
        sudo python setup.py install
        cd ..
    - uses: actions/checkout@v3
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: jsonlint
      shell: bash
      run: |
        cd EIGHTFINITE-build
        # Do not allow anything
        if [[ $(find . -type f -path ./.git -prune -o -path ./node_modules/npm-6/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./node_modules/entities/lib/maps -prune -o -name '*.json' -exec jsonlint -s --forbid any-type-at-start,bom,duplicate-keys,non-portable,non-bmp,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./node_modules/npm-6/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/entities/lib/maps -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        cd ..
  artifacts_npm_linux:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        export node_version=$(cat EIGHTFINITE-build/package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        sudo ln -sf "$(pwd)/EIGHTFINITE-build/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node" /usr/local/bin/node
        cd EIGHTFINITE-build
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node node_modules/npm-6/node_modules/npm/bin/npm-cli.js ls --no-unicode --loglevel=silent | grep -v ' deduped' || true
        rm -rf .npm/
        cd ..
        EIGHTFINITE-build/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node EIGHTFINITE-build/node_modules/npm-6/node_modules/npm/bin/npm-cli.js install ./EIGHTFINITE-build
        rm -rf .npm/
  artifacts_npm_windows:
    runs-on: windows-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        rm -r "C:\\Program Files\\nodejs"
        export node_version=$(cat EIGHTFINITE-build/package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        echo -n "$node_version" > node_version.txt
    - name: npm
      shell: cmd
      run: |
        set /p node_version=<node_version.txt
        mklink /d "C:\Program Files\nodejs" "%cd%\EIGHTFINITE-build\bin\windows\x64\node\node-v%node_version%-win-x64"
    - name: npm
      shell: bash
      run: |
        cd EIGHTFINITE-build
        mv ../node_version.txt .
        export node_version=$(cat node_version.txt)
        rm node_version.txt
        bin/windows/x64/node/node-v$node_version-win-x64/node.exe node_modules/npm-6/node_modules/npm/bin/npm-cli.js ls --no-unicode --loglevel=silent | grep -v ' deduped' || true
        rm -rf .npm/
        cd ..
        EIGHTFINITE-build/bin/windows/x64/node/node-v$node_version-win-x64/node.exe EIGHTFINITE-build/node_modules/npm-6/node_modules/npm/bin/npm-cli.js install .\\EIGHTFINITE-build
        rm -rf .npm/
  artifacts_audit_linux:
    runs-on: ubuntu-latest
    needs: artifacts_npm_linux
    if: needs.artifacts_npm_linux.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: artifacts
    - name: audit
      shell: bash
      run: |
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        sudo ln -sf "$(pwd)/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node" /usr/local/bin/node
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node node_modules/npm-7/node_modules/npm/bin/npm-cli.js audit
        rm -rf .npm/
  artifacts_audit_windows:
    runs-on: windows-latest
    needs: artifacts_npm_windows
    if: needs.artifacts_npm_windows.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: artifacts
    - name: audit
      shell: bash
      run: |
        rm -r "C:\\Program Files\\nodejs"
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        echo -n "$node_version" > node_version.txt
    - name: audit
      shell: cmd
      run: |
        set /p node_version=<node_version.txt
        mklink /d "C:\Program Files\nodejs" "%cd%\bin\windows\x64\node\node-v%node_version%-win-x64"
    - name: audit
      shell: bash
      run: |
        export node_version=$(cat node_version.txt)
        rm node_version.txt
        bin/windows/x64/node/node-v$node_version-win-x64/node.exe node_modules/npm-7/node_modules/npm/bin/npm-cli.js audit
        rm -rf .npm/
  release:
    runs-on: ubuntu-latest
    needs: [artifacts_jsonlint, artifacts_npm_linux, artifacts_npm_windows]
    if: ${{ needs.artifacts_jsonlint.result == 'success' && needs.artifacts_npm_linux.result == 'success' && needs.artifacts_npm_windows.result == 'success' }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: artifacts
    - name: Release
      shell: bash
      run: |
        bash --noprofile --norc -e -o pipefail docs/tools/git-config.sh
        export GIT_AUTHOR_DATE="$(git log -1 --format=%aD)"
        export GIT_COMMITTER_DATE="$(git log -1 --format=%cD)"
        
        # Update downloadlist files
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node --use_strict main.js --update_single_file_daily
        git checkout -- 'README.html'
        git checkout -- 'README.md'
        git clean -ffx MultiMC/
        git clean -ffx _download/
        git clean -ffx minecraft/
        git clean -ffx server/
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Release
        git tag -f latest
        git push -f origin refs/tags/latest:refs/tags/latest
  release_jsonlint:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        repository: EIGHTFINITE/demjson
        ref: master
        path: demjson
    - name: Build demjson
      shell: bash
      run: |
        cd demjson
        sudo python setup.py install
        cd ..
    - uses: actions/checkout@v3
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: jsonlint
      shell: bash
      run: |
        cd EIGHTFINITE-build
        # Do not allow anything
        if [[ $(find . -type f -path ./.git -prune -o -path ./node_modules/npm-6/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./node_modules/entities/lib/maps -prune -o -name '*.json' -exec jsonlint -s --forbid any-type-at-start,bom,duplicate-keys,non-portable,non-bmp,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./node_modules/npm-6/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/entities/lib/maps -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        cd ..
  release_npm_linux:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        export node_version=$(cat EIGHTFINITE-build/package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        sudo ln -sf "$(pwd)/EIGHTFINITE-build/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node" /usr/local/bin/node
        cd EIGHTFINITE-build
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node node_modules/npm-6/node_modules/npm/bin/npm-cli.js ls --no-unicode --loglevel=silent | grep -v ' deduped' || true
        rm -rf .npm/
        cd ..
        EIGHTFINITE-build/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node EIGHTFINITE-build/node_modules/npm-6/node_modules/npm/bin/npm-cli.js install ./EIGHTFINITE-build
        rm -rf .npm/
  release_npm_windows:
    runs-on: windows-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        rm -r "C:\\Program Files\\nodejs"
        export node_version=$(cat EIGHTFINITE-build/package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        echo -n "$node_version" > node_version.txt
    - name: npm
      shell: cmd
      run: |
        set /p node_version=<node_version.txt
        mklink /d "C:\Program Files\nodejs" "%cd%\EIGHTFINITE-build\bin\windows\x64\node\node-v%node_version%-win-x64"
    - name: npm
      shell: bash
      run: |
        cd EIGHTFINITE-build
        mv ../node_version.txt .
        export node_version=$(cat node_version.txt)
        rm node_version.txt
        bin/windows/x64/node/node-v$node_version-win-x64/node.exe node_modules/npm-6/node_modules/npm/bin/npm-cli.js ls --no-unicode --loglevel=silent | grep -v ' deduped' || true
        rm -rf .npm/
        cd ..
        EIGHTFINITE-build/bin/windows/x64/node/node-v$node_version-win-x64/node.exe EIGHTFINITE-build/node_modules/npm-6/node_modules/npm/bin/npm-cli.js install .\\EIGHTFINITE-build
        rm -rf .npm/
  release_audit_linux:
    runs-on: ubuntu-latest
    needs: release_npm_linux
    if: needs.release_npm_linux.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: latest
    - name: audit
      shell: bash
      run: |
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        sudo ln -sf "$(pwd)/bin/linux/x64/node/node-v$node_version-linux-x64/bin/node" /usr/local/bin/node
        bin/linux/x64/node/node-v$node_version-linux-x64/bin/node node_modules/npm-7/node_modules/npm/bin/npm-cli.js audit
        rm -rf .npm/
  release_audit_windows:
    runs-on: windows-latest
    needs: release_npm_windows
    if: needs.release_npm_windows.result == 'success'
    steps:
    - uses: actions/checkout@v3
      with:
        ref: latest
    - name: audit
      shell: bash
      run: |
        rm -r "C:\\Program Files\\nodejs"
        export node_version=$(cat package.json | python -c "import sys, json; print(json.load(sys.stdin)['engines']['node'])")
        echo -n "$node_version" > node_version.txt
    - name: audit
      shell: cmd
      run: |
        set /p node_version=<node_version.txt
        mklink /d "C:\Program Files\nodejs" "%cd%\bin\windows\x64\node\node-v%node_version%-win-x64"
    - name: audit
      shell: bash
      run: |
        export node_version=$(cat node_version.txt)
        rm node_version.txt
        bin/windows/x64/node/node-v$node_version-win-x64/node.exe node_modules/npm-7/node_modules/npm/bin/npm-cli.js audit
        rm -rf .npm/
