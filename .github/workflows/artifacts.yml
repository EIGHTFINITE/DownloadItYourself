name: Artifacts

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'

jobs:
  artifacts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Artifacts
      shell: bash
      run: |
        docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        export GIT_AUTHOR_DATE="$(git log -1 --format=%aD)"
        export GIT_COMMITTER_DATE="$(git log -1 --format=%cD)"
        
        # JRE Windows x86
        sed -i '/\/bin\//d' -- '.gitignore'
        git checkout refs/tags/artifacts -- "bin/windows/x86/jre/jre-8u201-windows-i586"
        rmdir "bin/windows/x86/jre/jre-8u201-windows-i586/jre1.8.0_201/lib/applet"
        git submodule add -f https://github.com/EIGHTFINITE/void "bin/windows/x86/jre/jre-8u201-windows-i586/jre1.8.0_201/lib/applet"
        git add -f ".gitmodules"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x86 JRE 8u201 release artifacts
        
        The fix for JDK-8155635 in 8u202 causes performance issues, so 8u201 becomes the final BCL release." | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # JRE Windows x64
        sed -i '/\/bin\//d' -- '.gitignore'
        git checkout refs/tags/artifacts -- "bin/windows/x64/jre/jre-8u201-windows-x64"
        rmdir "bin/windows/x64/jre/jre-8u201-windows-x64/jre1.8.0_201/lib/applet"
        git submodule add -f https://github.com/EIGHTFINITE/void "bin/windows/x64/jre/jre-8u201-windows-x64/jre1.8.0_201/lib/applet"
        git add -f ".gitmodules"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x64 JRE 8u201 release artifacts
        
        The fix for JDK-8155635 in 8u202 causes performance issues, so 8u201 becomes the final BCL release." | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # JRE Linux x64
        sed -i '/\/bin\//d' -- '.gitignore'
        git checkout refs/tags/artifacts -- "bin/linux/x64/jre/jre-8u201-linux-x64"
        rmdir "bin/linux/x64/jre/jre-8u201-linux-x64/jre1.8.0_201/lib/applet"
        git submodule add -f https://github.com/EIGHTFINITE/void "bin/linux/x64/jre/jre-8u201-linux-x64/jre1.8.0_201/lib/applet"
        git add -f ".gitmodules"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Linux x64 JRE 8u201 release artifacts
        
        The fix for JDK-8155635 in 8u202 causes performance issues, so 8u201 becomes the final BCL release." | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # 7z Windows x86
        wget -nv -O "7z1900.exe" https://www.7-zip.org/a/7z1900.exe
        mkdir -p "bin/windows/x86/7z/7z1900"
        7z x -o"bin/windows/x86/7z/7z1900" "7z1900.exe" | grep "ing archive"
        rm "7z1900.exe"
        rm "bin/windows/x86/7z/7z1900/Uninstall.exe"
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x86/7z/7z1900"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x86 7z 19.00 release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # 7z Windows x64
        wget -nv -O "7z1900-x64.exe" https://www.7-zip.org/a/7z1900-x64.exe
        mkdir -p "bin/windows/x64/7z/7z1900-x64"
        7z x -o"bin/windows/x64/7z/7z1900-x64" "7z1900-x64.exe" | grep "ing archive"
        rm "7z1900-x64.exe"
        rm "bin/windows/x64/7z/7z1900-x64/Uninstall.exe"
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x64/7z/7z1900-x64"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x64 7z 19.00 release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Node Windows x86
        wget -nv -O "node-v12.10.0-win-x86.zip" https://nodejs.org/dist/v12.10.0/node-v12.10.0-win-x86.zip
        mkdir -p "bin/windows/x86/node"
        7z x -o"bin/windows/x86/node" "node-v12.10.0-win-x86.zip" | grep "ing archive"
        rm "node-v12.10.0-win-x86.zip"
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x86/node"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x86 Node 12.10.0 release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Node Windows x64
        wget -nv -O "node-v12.10.0-win-x64.zip" https://nodejs.org/dist/v12.10.0/node-v12.10.0-win-x64.zip
        mkdir -p "bin/windows/x64/node"
        7z x -o"bin/windows/x64/node" "node-v12.10.0-win-x64.zip" | grep "ing archive"
        rm "node-v12.10.0-win-x64.zip"
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x64/node"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x64 Node 12.10.0 release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Node Linux x64
        wget -nv -O "node-v12.10.0-linux-x64.tar.gz" https://nodejs.org/dist/v12.10.0/node-v12.10.0-linux-x64.tar.gz
        mkdir -p "bin/linux/x64/node"
        tar -xzf "node-v12.10.0-linux-x64.tar.gz" -C "bin/linux/x64/node"
        rm "node-v12.10.0-linux-x64.tar.gz"
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/linux/x64/node"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Linux x64 Node 12.10.0 release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        sudo ln -sf "$(pwd)/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node" /usr/local/bin/node
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Electron Windows x86
        export force_no_cache=true
        export npm_config_platform=win32
        export npm_config_arch=ia32
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install electron@$(cat package.json | python -c "import sys, json; print json.load(sys.stdin)['dependencies']['electron']") --offline=false
        rm -r .npm/
        export npm_config_target=$(cat node_modules/electron/package.json | python -c "import sys, json; print json.load(sys.stdin)['version']")
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        rm -r node_modules/@types/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node node_modules/electron/install.js
        mkdir -p "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32"
        mv -T node_modules/electron/dist "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32"
        rm -r node_modules/
        rm package-lock.json
        if [[ $(stat -c%s "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32/electron.exe") -gt 104857600 ]]; then
          split -b 104857600 --numeric-suffixes=1 --suffix-length=3 "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32/electron.exe" "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32/electron.exe."
          rm "bin/windows/x86/electron/electron-v$npm_config_target-win32-ia32/electron.exe"
        fi
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x86/electron"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x86 Electron $npm_config_target release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Electron Windows x64
        export npm_config_arch=x64
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install electron@$(cat package.json | python -c "import sys, json; print json.load(sys.stdin)['dependencies']['electron']") --offline=false
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        rm -r node_modules/@types/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node node_modules/electron/install.js
        mkdir -p "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64"
        mv -T node_modules/electron/dist "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64"
        rm -r node_modules/
        rm package-lock.json
        if [[ $(stat -c%s "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64/electron.exe") -gt 104857600 ]]; then
          split -b 104857600 --numeric-suffixes=1 --suffix-length=3 "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64/electron.exe" "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64/electron.exe."
          rm "bin/windows/x64/electron/electron-v$npm_config_target-win32-x64/electron.exe"
        fi
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/windows/x64/electron"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Windows x64 Electron $npm_config_target release artifacts" | sed -n 1p
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Electron Linux x64
        export npm_config_platform=linux
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install electron@$(cat package.json | python -c "import sys, json; print json.load(sys.stdin)['dependencies']['electron']") --offline=false
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        rm -r node_modules/@types/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node node_modules/electron/install.js
        mkdir -p "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64"
        mv -T node_modules/electron/dist "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64"
        rm -r node_modules/
        rm package-lock.json
        if [[ $(stat -c%s "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64/electron") -gt 104857600 ]]; then
          split -b 104857600 --numeric-suffixes=1 --suffix-length=3 "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64/electron" "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64/electron."
          rm "bin/linux/x64/electron/electron-v$npm_config_target-linux-x64/electron"
        fi
        sed -i '/\/bin\//d' -- '.gitignore'
        git add "bin/linux/x64/electron"
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add Linux x64 Electron $npm_config_target release artifacts" | sed -n 1p
        export return_commit="$(git log -1 --format=%H)"
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Node modules
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install --offline=false
        rm -r .npm/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        rm -r node_modules/@types/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js dedupe
        rm -r .npm/
        find node_modules/ -mindepth 2 -type d \( -name '.github' -o -name 'example' -o -name 'test' \) | xargs rm -r
        find node_modules/ -mindepth 2 -type f \( -name '*.d.ts' -o -name '*.d.ts.map' -o -name '*.js.map' -o -name '.eslintrc.yml' -o -name '.gitmodules' -o -name '.npmignore' -o -name '.travis.yml' -o -name 'yarn.lock' \) -exec bash -c 'rm "$1"; rmdir --ignore-fail-on-non-empty $(dirname "$1")' bash '{}' ';'
        find node_modules/ -mindepth 2 -type f -name 'package.json' -exec sed -i '/"_where"/d' -- '{}' ';'
        find node_modules/ -mindepth 2 -type f -name 'package.json' -exec sed -i '/"man": \[/,/\],/d' -- '{}' ';'
        printf "electron" > "node_modules/electron/path.txt"
        sed -i '/\/node_modules\//d' -- '.gitignore'
        find node_modules/ -mindepth 2 -maxdepth 3 -type f -name 'package.json' -exec bash -c 'path="{}"; git add -- "${path:0:-13}"; git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add ${path:13:-13} release artifacts" | sed -n 1p' ';'
        git add -f package-lock.json
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"package-lock.json" | sed -n 1p
        export merge_commit="$(git log -1 --format=%H)"
        git checkout -- '.gitignore'
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        git reset --hard $return_commit
        git clean -dffx
        git -c user.name="GitHub" -c user.email="noreply@github.com" merge --no-ff --no-edit $merge_commit~ | sed -n 1p
        if [[ "$(git log -1 --format=%H)" == "$return_commit" ]]; then
          exit 1
        fi
        git checkout $merge_commit -- 'package-lock.json'
        git -c user.name="GitHub" -c user.email="noreply@github.com" commit --amend --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" -m"Add vendored Node modules
        
        Node modules and their dependencies updated to the latest versions found in https://github.com/${{ github.repository }}/blob/master/package.json" | sed -n 1p
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Artifacts
        git tag -f artifacts
        git push -f origin refs/tags/artifacts:refs/tags/artifacts
  readme:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
    - name: README
      shell: bash
      run: |
        docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        git restore --source=artifacts -- bin/
        git restore --source=artifacts -- node_modules/
        git restore --source=artifacts -- package-lock.json
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node --use_strict main.js --readme_only
        git checkout -- 'downloadlist.json'
    - uses: peter-evans/create-pull-request@v3.8.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update README
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Update README
        body: |
          Update the README.
        labels: auto-merge
        branch: actions/readme
        base: master
  engines:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Engines
      shell: bash
      run: |
        docs/tools/git-config.sh
        git fetch --depth 1 origin +refs/tags/artifacts:refs/tags/artifacts --no-tags
        git restore --source=artifacts -- bin/
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install npm --offline=false
        rm -r .npm/
        sed -i "0,/\"npm\": \".*\"/s//\"npm\": \"$(cat bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/package.json | python -c "import sys, json; print json.load(sys.stdin)['version']") || $(cat node_modules/npm/package.json | python -c "import sys, json; print json.load(sys.stdin)['version']")\"/" package.json
    - uses: peter-evans/create-pull-request@v3.8.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: Update engines
        author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
        committer: GitHub <noreply@github.com>
        title: Update engines
        body: |
          Update the engines field.
        labels: auto-merge
        branch: actions/engines
        base: master
  artifacts_jsonlint:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        repository: EIGHTFINITE/demjson
        ref: master
        path: demjson
    - name: Build demjson
      shell: bash
      run: |
        cd demjson
        sudo python setup.py install
        cd ..
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: jsonlint
      shell: bash
      run: |
        cd EIGHTFINITE-build
        # Do not allow anything
        if [[ $(find . -type f -path ./.git -prune -o -path ./bin/windows/x64/node/node-v12.10.0-win-x64/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./bin/windows/x86/node/node-v12.10.0-win-x86/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./node_modules/entities/lib/maps -prune -o -path ./node_modules/got/node_modules/@sindresorhus/is -prune -o -name '*.json' -exec jsonlint -s --forbid any-type-at-start,bom,duplicate-keys,non-portable,non-bmp,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/windows/x64/node/node-v12.10.0-win-x64/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/windows/x86/node/node-v12.10.0-win-x86/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/entities/lib/maps -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/got/node_modules/@sindresorhus/is -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        cd ..
  artifacts_npm_linux:
    runs-on: ubuntu-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        sudo ln -sf "$(pwd)/EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node" /usr/local/bin/node
        cd EIGHTFINITE-build
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js ls --unicode=false --loglevel=silent | grep -v ' deduped' || true
        rm -r .npm/
        cd ..
        EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install ./EIGHTFINITE-build
        rm -r .npm/
  artifacts_npm_windows:
    runs-on: windows-latest
    needs: artifacts
    if: needs.artifacts.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        rm -r "C:\\Program Files\\nodejs"
    - name: npm
      shell: cmd
      run: |
        mklink /d "C:\Program Files\nodejs" "%cd%\EIGHTFINITE-build\bin\windows\x64\node\node-v12.10.0-win-x64"
    - name: npm
      shell: bash
      run: |
        cd EIGHTFINITE-build
        bin/windows/x64/node/node-v12.10.0-win-x64/npm.cmd ls --unicode=false --loglevel=silent | grep -v ' deduped' || true
        rm -r .npm/
        cd ..
        EIGHTFINITE-build/bin/windows/x64/node/node-v12.10.0-win-x64/npm.cmd install .\\EIGHTFINITE-build
        rm -r .npm/
  artifacts_audit_linux:
    runs-on: ubuntu-latest
    needs: artifacts_npm_linux
    if: needs.artifacts_npm_linux.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
    - name: audit
      shell: bash
      run: |
        sudo ln -sf "$(pwd)/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node" /usr/local/bin/node
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node node_modules/npm/bin/npm-cli.js audit
        rm -r .npm/
  artifacts_audit_windows:
    runs-on: windows-latest
    needs: artifacts_npm_windows
    if: needs.artifacts_npm_windows.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
    - name: audit
      shell: bash
      run: |
        rm -r "C:\\Program Files\\nodejs"
    - name: audit
      shell: cmd
      run: |
        mklink /d "C:\Program Files\nodejs" "%cd%\bin\windows\x64\node\node-v12.10.0-win-x64"
    - name: audit
      shell: bash
      run: |
        bin/windows/x64/node/node-v12.10.0-win-x64/node.exe node_modules/npm/bin/npm-cli.js audit
        rm -r .npm/
  release:
    runs-on: ubuntu-latest
    needs: [artifacts_jsonlint, artifacts_npm_linux, artifacts_npm_windows]
    if: ${{ needs.artifacts_jsonlint.result == 'success' && needs.artifacts_npm_linux.result == 'success' && needs.artifacts_npm_windows.result == 'success' }}
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: artifacts
    - name: Release
      shell: bash
      run: |
        docs/tools/git-config.sh
        export GIT_AUTHOR_DATE="$(git log -1 --format=%aD)"
        export GIT_COMMITTER_DATE="$(git log -1 --format=%cD)"
        
        # Update downloadlist files
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node --use_strict main.js --update_single_file_daily
        git checkout -- 'README.html'
        git checkout -- 'README.md'
        git clean -ffx MultiMC/
        git clean -ffx _download/
        git clean -ffx minecraft/
        git clean -ffx server/
        if [[ $(git status --porcelain | tee /dev/stderr | head -c1 | wc -c) -ne 0 || $(git clean -dffx | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        
        # Release
        git tag -f latest
        git push -f origin refs/tags/latest:refs/tags/latest
  release_jsonlint:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        repository: EIGHTFINITE/demjson
        ref: master
        path: demjson
    - name: Build demjson
      shell: bash
      run: |
        cd demjson
        sudo python setup.py install
        cd ..
    - uses: actions/checkout@v2.3.4
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: jsonlint
      shell: bash
      run: |
        cd EIGHTFINITE-build
        # Do not allow anything
        if [[ $(find . -type f -path ./.git -prune -o -path ./bin/windows/x64/node/node-v12.10.0-win-x64/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./bin/windows/x86/node/node-v12.10.0-win-x86/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/node_modules/iconv-lite/encodings/tables -prune -o -path ./node_modules/entities/lib/maps -prune -o -path ./node_modules/got/node_modules/@sindresorhus/is -prune -o -name '*.json' -exec jsonlint -s --forbid any-type-at-start,bom,duplicate-keys,non-portable,non-bmp,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/windows/x64/node/node-v12.10.0-win-x64/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/windows/x86/node/node-v12.10.0-win-x86/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp, zero-byte
        if [[ $(find ./bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/node_modules/iconv-lite/encodings/tables -name '*.json' -exec jsonlint -s --allow non-bmp,zero-byte --forbid any-type-at-start,bom,duplicate-keys,non-portable -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/entities/lib/maps -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        # Allow non-bmp
        if [[ $(find ./node_modules/got/node_modules/@sindresorhus/is -name '*.json' -exec jsonlint -s --allow non-bmp --forbid any-type-at-start,bom,duplicate-keys,non-portable,zero-byte -e utf8 -- '{}' ';' | grep -v -e ': ok' -e ': has errors' | tee /dev/stderr | head -c1 | wc -c) -ne 0 ]]
          then exit 1
        fi
        cd ..
  release_npm_linux:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        sudo ln -sf "$(pwd)/EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node" /usr/local/bin/node
        cd EIGHTFINITE-build
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js ls --unicode=false --loglevel=silent | grep -v ' deduped' || true
        rm -r .npm/
        cd ..
        EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node EIGHTFINITE-build/bin/linux/x64/node/node-v12.10.0-linux-x64/lib/node_modules/npm/bin/npm-cli.js install ./EIGHTFINITE-build
        rm -r .npm/
  release_npm_windows:
    runs-on: windows-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: latest
        path: EIGHTFINITE-build
    - name: npm
      shell: bash
      run: |
        echo '{
          "private": "true"
        }' > package.json
        cp EIGHTFINITE-build/.npmrc .npmrc
        rm -r "C:\\Program Files\\nodejs"
    - name: npm
      shell: cmd
      run: |
        mklink /d "C:\Program Files\nodejs" "%cd%\EIGHTFINITE-build\bin\windows\x64\node\node-v12.10.0-win-x64"
    - name: npm
      shell: bash
      run: |
        cd EIGHTFINITE-build
        bin/windows/x64/node/node-v12.10.0-win-x64/npm.cmd ls --unicode=false --loglevel=silent | grep -v ' deduped' || true
        rm -r .npm/
        cd ..
        EIGHTFINITE-build/bin/windows/x64/node/node-v12.10.0-win-x64/npm.cmd install .\\EIGHTFINITE-build
        rm -r .npm/
  release_audit_linux:
    runs-on: ubuntu-latest
    needs: release_npm_linux
    if: needs.release_npm_linux.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: latest
    - name: audit
      shell: bash
      run: |
        sudo ln -sf "$(pwd)/bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node" /usr/local/bin/node
        bin/linux/x64/node/node-v12.10.0-linux-x64/bin/node node_modules/npm/bin/npm-cli.js audit
        rm -r .npm/
  release_audit_windows:
    runs-on: windows-latest
    needs: release_npm_windows
    if: needs.release_npm_windows.result == 'success'
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        ref: latest
    - name: audit
      shell: bash
      run: |
        rm -r "C:\\Program Files\\nodejs"
    - name: audit
      shell: cmd
      run: |
        mklink /d "C:\Program Files\nodejs" "%cd%\bin\windows\x64\node\node-v12.10.0-win-x64"
    - name: audit
      shell: bash
      run: |
        bin/windows/x64/node/node-v12.10.0-win-x64/node.exe node_modules/npm/bin/npm-cli.js audit
        rm -r .npm/
